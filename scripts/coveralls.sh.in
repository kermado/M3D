#!/bin/bash

LIB_DIR=@COVERALLS_SOURCE_DIR@

SOURCE_PREFIX=@CMAKE_SOURCE_DIR@
GCOV_SOURCE_PREFIX=${SOURCE_PREFIX//\//#}\#

GCOV_VERSION=$(gcov -v | head -n 1 | sed 's/^.*[^0-9]\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*$/\1 \2 \3/')

#gcov --source-prefix @CMAKE_SOURCE_DIR@ --preserve-paths --relative-only $(find -iname *.gcda) 1>/dev/null || exit 0

echo "generating gcov files"

for file in $(find ${LIB_DIR} -iname *.gcda -print)
do
	echo generating file $(basename $file)
	gcov --preserve-paths -o $(dirname $file) $file 1>/dev/null || exit 0
done

echo "done!"

if [ ! -z "${TRAVIS_JOB_ID}" ]
then

  cat >coverage.json <<EOF
{
  "service_name": "travis-ci",
  "service_job_id": "${TRAVIS_JOB_ID}",
  "run_at": "$(date --iso-8601=s)",
  "source_files": [
EOF

else

  cat >coverage.json <<EOF
{
  "repo_token": "$1",
  "run_at": "$(date --iso-8601=s)",
  "git": {
    "head": {
      "id": "$(git log -1 --pretty=format:%H)",
      "author_name": "$(git log -1 --pretty=format:%an | sed -re 's%\\%\\\\%g; s%"%\\"%g; s%$%\\n%' | tr -d $'\n' | sed -re 's%\\n$%%')",
      "author_email": "$(git log -1 --pretty=format:%ae | sed -re 's%\\%\\\\%g; s%"%\\"%g; s%$%\\n%' | tr -d $'\n' | sed -re 's%\\n$%%')",
      "committer_name": "$(git log -1 --pretty=format:%cn | sed -re 's%\\%\\\\%g; s%"%\\"%g; s%$%\\n%' | tr -d $'\n' | sed -re 's%\\n$%%')",
      "committer_email": "$(git log -1 --pretty=format:%ce | sed -re 's%\\%\\\\%g; s%"%\\"%g; s%$%\\n%' | tr -d $'\n' | sed -re 's%\\n$%%')",
      "message": "$(git log -1 --pretty=format:%B | sed -re 's%\\%\\\\%g; s%"%\\"%g; s%$%\\n%' | tr -d $'\n' | sed -re 's%\\n$%%')"
    },
    "branch": "$(git rev-parse --abbrev-ref HEAD)",
    "remotes": [
      $(git remote -v | grep 'fetch' | awk '{ print "{\"name\":\""$1"\",\"url\":\""$2"\"}" }' | tr $'\n' ',' | sed -re 's%,$%%')
    ]
  },
  "source_files": [
EOF

fi

echo "processing source files"

for file in $(find * -iname '*.gcov' -print)
do
  if [[ $file != $GCOV_SOURCE_PREFIX* ]]
  then
    continue;
  fi
  echo processing file $file
  srcname=$(echo ${file} | sed -re 's%#%\/%g; s%.gcov$%%')
  cat >>coverage.json <<EOF
    {
      "name": "${srcname//$SOURCE_PREFIX\//}",
      "source": "$(tail -n +3 ${file} | cut -d ':' -f 3- | sed -re 's%\\%\\\\%g; s%"%\\"%g; s%\t%\\t%g; s%$%\\n%' | tr -d $'\n' | sed -re 's%\\n$%%')",
      "coverage": [$(tail -n +3 ${file} | cut -d ':' -f 1 | sed -re 's%^ +%%g; s%-([0-9]+)%\1%; s%-%null%g; s%^[#=]+$%0%;' | tr $'\n' ',' | sed -re 's%,$%%')]
    },
EOF
done

echo "done!"

mv coverage.json coverage.json.tmp
cat >coverage.json <(head -n -1 coverage.json.tmp) <(echo -e "    }\n  ]\n}")
rm coverage.json.tmp

curl -F json_file=@coverage.json https://coveralls.io/api/v1/jobs

$(find * -name '*.gc*' -type f -exec rm {} \;)
